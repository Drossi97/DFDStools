---
interface Props {
  className?: string;
}

const { className = '' } = Astro.props;
---

<div class={`p-4 min-h-[400px] ${className}`}>
  <!-- Header con día seleccionado y toggle festivo -->
  <div class="flex items-center justify-between mb-4 pb-3 border-b border-gray-100">
    <h3 class="text-lg font-medium text-gray-900 capitalize selected-day-title" id="selected-day-title">
      Seleccione un día
    </h3>
    <label class="relative inline-flex items-center cursor-pointer holiday-toggle hidden">
      <div class="relative">
        <input
          type="checkbox"
          class="sr-only peer holiday-checkbox"
          id="holiday-checkbox"
        />
        <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-0 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-[#002B45]"></div>
      </div>
      <span class="ml-2 text-sm font-semibold text-gray-600">Marcar Día Festivo</span>
    </label>
  </div>

  <!-- Contenido del editor -->
  <div class="day-editor-content" id="day-editor-content">
    <p class="text-center text-gray-600 text-sm">Seleccione un día para ver los detalles</p>
  </div>

  <!-- Formulario del día (oculto inicialmente) -->
  <div class="space-y-4 day-editor-form hidden" id="day-editor-form">
    <!-- Selector de puesto -->
    <div class="flex flex-col space-y-1 mb-4">
      <label for="position-select" class="text-sm font-medium text-gray-600 text-center w-full">
        Puesto
      </label>
      <div class="relative mt-1" id="position-dropdown-container">
        <button
          type="button"
          id="position-button"
          class="w-full px-3 py-1.5 text-sm border border-gray-300 rounded-md text-gray-900 focus:outline-none focus:ring-0 bg-gray-50 flex items-center justify-between"
        >
          <span id="position-text">Seleccionar puesto</span>
          <svg class="h-4 w-4 text-gray-600" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M6 9L12 15L18 9" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
          </svg>
        </button>
        <div id="position-dropdown" class="absolute z-50 mt-1 w-full bg-white border border-gray-300 rounded-md shadow-lg overflow-auto hidden" style="max-height: 240px;">
          <button type="button" class="w-full text-left px-4 py-2 text-sm hover:bg-gray-100 block position-option" data-value="">
            Seleccionar puesto
          </button>
        </div>
      </div>
    </div>

    <!-- Campos de tiempo (solo visible para puestos con horario) -->
    <div class="space-y-4 time-section hidden" id="time-section">
      <div class="grid grid-cols-2 gap-4">
        <div>
          <label for="work-start" class="block text-xs font-medium text-gray-600 text-center w-full mb-1">
            Jornada Iniciada
          </label>
          <div class="w-full max-w-[120px] mx-auto">
            <input
              id="work-start"
              type="time"
              class="w-full px-3 py-1.5 text-sm border border-gray-300 rounded-md text-gray-900 focus:outline-none focus:ring-2 focus:ring-gray-500 text-center bg-gray-50"
            />
          </div>
        </div>
        <div>
          <label for="work-end" class="block text-xs font-medium text-gray-600 text-center w-full mb-1">
            Jornada Finalizada
          </label>
          <div class="w-full max-w-[120px] mx-auto">
            <input
              id="work-end"
              type="time"
              class="w-full px-3 py-1.5 text-sm border border-gray-300 rounded-md text-gray-900 focus:outline-none focus:ring-2 focus:ring-gray-500 text-center bg-gray-50"
            />
          </div>
        </div>
        </div>
      </div>

      <!-- Resumen de horas -->
    <div class="grid grid-cols-2 gap-4 mt-3 hours-summary hidden" id="hours-summary">
      <!-- Horas Totales (siempre visible cuando hay horas) -->
      <div class="flex flex-col items-center">
        <label class="text-xs text-gray-600 mb-0.5 flex items-center justify-center gap-1 w-full">
          <div class="w-3 h-3 rounded-full bg-green-500"></div>
          <span>Horas Totales</span>
        </label>
        <div class="w-full max-w-[120px] mx-auto">
          <input
            type="text"
            id="total-hours"
            value="0.00"
            readonly
            class="w-full px-3 py-1.5 text-sm border border-gray-300 rounded-md text-gray-900 text-center focus:outline-none focus:ring-0 focus:border-gray-300"
          />
        </div>
      </div>
      
      <!-- Horas Extras (solo visible si > 0) -->
      <div class="flex flex-col items-center extra-hours-display hidden">
        <label class="text-xs text-gray-600 mb-0.5 flex items-center justify-center gap-1 w-full">
          <div class="w-3 h-3 rounded-full bg-red-500"></div>
          <span>Horas Extras</span>
        </label>
        <div class="w-full max-w-[120px] mx-auto">
          <input
            type="text"
            id="extra-hours"
            value="0.00"
            readonly
            class="w-full px-3 py-1.5 text-sm border border-gray-300 rounded-md text-gray-900 text-center focus:outline-none focus:ring-0 focus:border-gray-300"
          />
        </div>
      </div>

      <!-- Horas Nocturnas (solo visible si > 0) -->
      <div class="flex flex-col items-center night-hours-display hidden">
        <label class="text-xs text-gray-600 mb-0.5 flex items-center justify-center gap-1 w-full">
          <div class="w-3 h-3 rounded-full bg-[#002B45]"></div>
          <span>Horas Nocturnas</span>
        </label>
        <div class="w-full max-w-[120px] mx-auto">
          <input
            type="text"
            id="night-hours"
            value="0.00"
            readonly
            class="w-full px-3 py-1.5 text-sm border border-gray-300 rounded-md text-gray-900 text-center focus:outline-none focus:ring-0 focus:border-gray-300"
          />
        </div>
      </div>

      <!-- Horas Festivas (solo visible si > 0) -->
      <div class="flex flex-col items-center holiday-hours-display hidden">
        <label class="text-xs text-gray-600 mb-0.5 flex items-center justify-center gap-1 w-full">
          <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
          <span>Horas Festivas</span>
        </label>
        <div class="w-full max-w-[120px] mx-auto">
          <input
            type="text"
            id="holiday-hours"
            value="0.00"
            readonly
            class="w-full px-3 py-1.5 text-sm border border-gray-300 rounded-md text-gray-900 text-center focus:outline-none focus:ring-0 focus:border-gray-300"
          />
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    let currentSelectedDate: Date | null = null;
    // Almacenamiento compartido en memoria (no persiste al recargar)
    if (!(window as any).timeEntriesData) {
      (window as any).timeEntriesData = {};
    }
    const entryData = (window as any).timeEntriesData;
    
    let isSelectOpen = false;
    let isMobile = false;

    // Elementos del DOM
    const titleElement = document.getElementById('selected-day-title');
    const contentElement = document.getElementById('day-editor-content');
    const formElement = document.getElementById('day-editor-form');
    const positionButton = document.getElementById('position-button');
    const positionText = document.getElementById('position-text');
    const positionDropdown = document.getElementById('position-dropdown');
    const positionDropdownContainer = document.getElementById('position-dropdown-container');
    const timeSectionElement = document.getElementById('time-section');
    const workStartInput = document.getElementById('work-start') as HTMLInputElement;
    const workEndInput = document.getElementById('work-end') as HTMLInputElement;
    const holidayCheckbox = document.getElementById('holiday-checkbox') as HTMLInputElement;
    const holidayToggle = document.querySelector('.holiday-toggle');
    const hoursSummary = document.getElementById('hours-summary');

    // Configuración de puestos (igual que en Next.js)
    const availablePositions: Record<string, { start: string; end: string } | string> = {
      'CM': { start: '06:00', end: '14:00' },
      'CT': { start: '14:00', end: '22:00' },
      'CTd': { start: '14:00', end: '22:00' },
      'CN': { start: '22:00', end: '06:00' },
      'AM': { start: '06:00', end: '14:00' },
      'AT': { start: '14:00', end: '22:00' },
      'AN': { start: '22:00', end: '06:00' },
      'TM1': { start: '06:00', end: '14:00' },
      'TT1': { start: '14:00', end: '22:00' },
      'TN1': { start: '22:00', end: '06:00' },
      'TM': { start: '06:00', end: '14:00' },
      'TT': { start: '14:00', end: '22:00' },
      'TN': { start: '22:00', end: '06:00' },
      'D': 'Descanso',
      'P': 'Permiso',
      'B': 'Baja',
      'V': 'Vacaciones',
      '--': 'Sin asignar'
    };

    const noHoursPositions = ['D', 'P', 'B', 'V', '--'];
    const standardDailyHours = 8;
    const nightStart = '22:00';
    const nightEnd = '06:00';

    const dayNames = ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"];

    // Detectar tamaño de pantalla
    function checkIfMobile() {
      isMobile = window.innerWidth < 768;
    }

    checkIfMobile();
    window.addEventListener('resize', checkIfMobile);

    function initializePositionDropdown() {
      if (!positionDropdown) return;
      positionDropdown.innerHTML = '';

      // Opción por defecto
      const defaultOption = document.createElement('button');
      defaultOption.type = 'button';
      defaultOption.className = 'w-full text-left px-4 py-2 text-sm hover:bg-gray-100 block position-option';
      defaultOption.dataset.value = '';
      defaultOption.textContent = 'Seleccionar puesto';
      positionDropdown.appendChild(defaultOption);

      // Opciones de puestos
      Object.entries(availablePositions).forEach(([key, value]) => {
        const option = document.createElement('button');
        option.type = 'button';
        option.className = 'w-full text-left px-4 py-2 text-sm hover:bg-gray-100 block position-option';
        option.dataset.value = key;
        option.textContent = typeof value === 'string' ? value : key;
        positionDropdown.appendChild(option);
      });

      // Event listeners para las opciones
      positionDropdown.querySelectorAll('.position-option').forEach(option => {
        option.addEventListener('click', function(this: HTMLButtonElement) {
          const value = this.dataset.value || '';
          selectPosition(value);
        });
      });
    }

    function selectPosition(value: string) {
      if (!positionText) return;

      const position = availablePositions[value];
      positionText.textContent = value ? (typeof position === 'string' ? position : value) : 'Seleccionar puesto';
      
      if (positionDropdown) {
        positionDropdown.classList.add('hidden');
        isSelectOpen = false;
      }

      // Auto-llenar horarios para turnos
      if (value && typeof position === 'object' && workStartInput && workEndInput) {
        workStartInput.value = position.start;
        workEndInput.value = position.end;
      }

      updateVisibility(value);
      calculateHours();
      saveDayData(value);
    }

    function updateVisibility(position: string) {
      const shouldShowHours = position && !noHoursPositions.includes(position);
      
      if (timeSectionElement) {
        timeSectionElement.classList.toggle('hidden', !shouldShowHours);
      }
      
      if (hoursSummary) {
        hoursSummary.classList.toggle('hidden', !shouldShowHours);
      }

      if (shouldShowHours) {
        calculateHours();
      }
    }

    function timeToMinutes(time: string): number {
      const [hours, minutes] = time.split(':').map(Number);
      return hours * 60 + minutes;
    }

    function calculateNightHours(startTime: string, endTime: string): number {
      const startMinutes = timeToMinutes(startTime);
      const endMinutes = timeToMinutes(endTime);
      const nightStartMinutes = timeToMinutes(nightStart);
      const nightEndMinutes = timeToMinutes(nightEnd);

      let nightMinutes = 0;
      let workStart = startMinutes;
      let workEnd = endMinutes;

      // Si el turno cruza medianoche
      if (workEnd < workStart) {
        workEnd += 24 * 60;
      }

      // Períodos nocturnos: 22:00-24:00 y 00:00-06:00
      const nightPeriods = [
        { start: nightStartMinutes, end: 24 * 60 }, // 22:00-24:00
        { start: 0, end: nightEndMinutes } // 00:00-06:00
      ];

      nightPeriods.forEach(period => {
        const overlapStart = Math.max(workStart, period.start);
        const overlapEnd = Math.min(workEnd, period.end);
        
        if (overlapStart < overlapEnd) {
          nightMinutes += overlapEnd - overlapStart;
        }
      });

      return nightMinutes / 60;
    }

    function calculateHours() {
      if (!workStartInput || !workEndInput || !currentSelectedDate) return;

      const startTime = workStartInput.value;
      const endTime = workEndInput.value;

      if (!startTime || !endTime) {
        updateHoursDisplay(0, 0, 0, 0);
        return;
      }

      const startMinutes = timeToMinutes(startTime);
      const endMinutes = timeToMinutes(endTime);
      
      let totalMinutes = endMinutes - startMinutes;
      if (totalMinutes < 0) {
        totalMinutes += 24 * 60; // Turno cruza medianoche
      }

      const totalHours = totalMinutes / 60;
      const extraHours = Math.max(0, totalHours - standardDailyHours);
      const nightHours = calculateNightHours(startTime, endTime);

      // Calcular horas festivas
      const isHoliday = holidayCheckbox?.checked || false;
      let holidayHours = 0;

      if (isHoliday) {
        // Si el turno cruza medianoche, solo las horas del día actual son festivas
        if (startMinutes + totalMinutes > 24 * 60) {
          const hoursUntilMidnight = (24 * 60 - startMinutes) / 60;
          holidayHours = hoursUntilMidnight;
          
          // Verificar si el día siguiente también es festivo
          const nextDay = new Date(currentSelectedDate);
          nextDay.setDate(nextDay.getDate() + 1);
          const nextDayKey = formatDateKey(nextDay);
          const nextDayData = entryData[nextDayKey];
          
          if (nextDayData && nextDayData.isHoliday) {
            const hoursAfterMidnight = (startMinutes + totalMinutes - 24 * 60) / 60;
            holidayHours += hoursAfterMidnight;
        }
      } else {
          holidayHours = totalHours;
        }
      }

      updateHoursDisplay(totalHours, extraHours, nightHours, holidayHours);
    }

    function updateHoursDisplay(total: number, extra: number, night: number, holiday: number) {
      const totalElement = document.getElementById('total-hours') as HTMLInputElement;
      const extraElement = document.getElementById('extra-hours') as HTMLInputElement;
      const nightElement = document.getElementById('night-hours') as HTMLInputElement;
      const holidayElement = document.getElementById('holiday-hours') as HTMLInputElement;

      if (totalElement) totalElement.value = total.toFixed(2);
      if (extraElement) extraElement.value = extra.toFixed(2);
      if (nightElement) nightElement.value = night.toFixed(2);
      if (holidayElement) holidayElement.value = holiday.toFixed(2);

      // Mostrar/ocultar campos según valores
      const extraDisplay = document.querySelector('.extra-hours-display');
      const nightDisplay = document.querySelector('.night-hours-display');
      const holidayDisplay = document.querySelector('.holiday-hours-display');

      if (extraDisplay) extraDisplay.classList.toggle('hidden', extra <= 0);
      if (nightDisplay) nightDisplay.classList.toggle('hidden', night <= 0);
      if (holidayDisplay) holidayDisplay.classList.toggle('hidden', holiday <= 0);
    }

    function formatDateKey(date: Date): string {
      return date.toISOString().split('T')[0];
    }

    function getDayName(date: Date): string {
      return dayNames[date.getDay()];
    }

    function saveDayData(position?: string) {
      if (!currentSelectedDate) return;

      const dateKey = formatDateKey(currentSelectedDate);
      const currentPosition = position || (positionText?.textContent === 'Seleccionar puesto' ? '' : 
                             Object.keys(availablePositions).find(key => 
                               (typeof availablePositions[key] === 'string' ? availablePositions[key] : key) === positionText?.textContent
                             ) || '');
      
      const data = {
        position: currentPosition,
        workStart: workStartInput?.value || '',
        workEnd: workEndInput?.value || '',
        isHoliday: holidayCheckbox?.checked || false,
        totalHours: 0,
        extraHours: 0,
        nightHours: 0,
        holidayHours: 0
      };

      // Calcular horas si es un puesto con horario
      if (currentPosition && !noHoursPositions.includes(currentPosition) && data.workStart && data.workEnd) {
        const startMinutes = timeToMinutes(data.workStart);
        const endMinutes = timeToMinutes(data.workEnd);
        
        let totalMinutes = endMinutes - startMinutes;
        if (totalMinutes < 0) totalMinutes += 24 * 60;

        data.totalHours = totalMinutes / 60;
        data.extraHours = Math.max(0, data.totalHours - standardDailyHours);
        data.nightHours = calculateNightHours(data.workStart, data.workEnd);
        
        // Calcular horas festivas correctamente
        if (data.isHoliday) {
          if (startMinutes + totalMinutes > 24 * 60) {
            const hoursUntilMidnight = (24 * 60 - startMinutes) / 60;
            data.holidayHours = hoursUntilMidnight;
          } else {
            data.holidayHours = data.totalHours;
          }
        }
        
        // Verificar día siguiente si el turno cruza medianoche
        if (startMinutes + totalMinutes > 24 * 60 && currentSelectedDate) {
          const nextDay = new Date(currentSelectedDate);
          nextDay.setDate(nextDay.getDate() + 1);
          const nextDayKey = formatDateKey(nextDay);
          const nextDayData = entryData[nextDayKey];
          
          if (nextDayData && nextDayData.isHoliday) {
            const hoursAfterMidnight = (startMinutes + totalMinutes - 24 * 60) / 60;
            data.holidayHours += hoursAfterMidnight;
          }
        }
      }

      entryData[dateKey] = data;
      // Los datos están en memoria compartida (no persisten al recargar)

      // Disparar eventos con los datos actualizados
      const dataChangedEvent = new CustomEvent('dataChanged', { 
        detail: { entries: entryData } 
      });
      document.dispatchEvent(dataChangedEvent);
      const dayDataEvent = new CustomEvent('dayDataUpdated');
      document.dispatchEvent(dayDataEvent);

    }

    function loadDayData(date: Date) {
      const dateKey = formatDateKey(date);
      const data = entryData[dateKey] || {};

      // Cargar posición
      if (data.position) {
        selectPosition(data.position);
      } else {
        selectPosition('');
      }

      // Cargar horarios
      if (workStartInput) workStartInput.value = data.workStart || '';
      if (workEndInput) workEndInput.value = data.workEnd || '';
      if (holidayCheckbox) holidayCheckbox.checked = data.isHoliday || false;

      calculateHours();
    }

    function showDayEditor(date: Date | null) {
      if (!titleElement || !contentElement || !formElement || !date) return;

      const dayName = getDayName(date);
      const dayNumber = date.getDate();

      titleElement.textContent = `${dayName} ${dayNumber}`;
      
      contentElement.style.display = 'none';
      formElement.classList.remove('hidden');
      if (holidayToggle) holidayToggle.classList.remove('hidden');

      loadDayData(date);
    }

    // Event listeners
    if (positionButton) {
      positionButton.addEventListener('click', function() {
        if (positionDropdown) {
          isSelectOpen = !isSelectOpen;
          positionDropdown.classList.toggle('hidden', !isSelectOpen);
        }
      });
    }

    // Cerrar dropdown al hacer clic fuera
    document.addEventListener('click', function(event) {
      if (positionDropdown && !positionDropdownContainer?.contains(event.target as Node)) {
        positionDropdown.classList.add('hidden');
        isSelectOpen = false;
      }
    });

    if (workStartInput) {
      workStartInput.addEventListener('change', function() {
        calculateHours();
        saveDayData();
      });
    }

    if (workEndInput) {
      workEndInput.addEventListener('change', function() {
        calculateHours();
        saveDayData();
      });
    }

    if (holidayCheckbox) {
      holidayCheckbox.addEventListener('change', function() {
        calculateHours();
        saveDayData();
      });
    }

    // Escuchar selección de día
    document.addEventListener('daySelected', function(event: any) {
      currentSelectedDate = event.detail.date;
      showDayEditor(currentSelectedDate);
    });

    // Inicializar dropdown
    initializePositionDropdown();
  });
</script>